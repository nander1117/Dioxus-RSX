{
  "comment": "gram√°tica de RSX dentro de la macro rsx!",
  "name": "Dioxus RSX",
  "scopeName": "source.dioxus.rsx",
  "fileTypes": ["rsx"],
  "injectionSelector": "L:source.rust",
  "patterns": [
    {
      "comment": "todo se aplicara solo dentro de la macro rsx!",
      "begin": "(rsx!)\\s*(\\{|\\()",
      "end": "(\\}|\\))",
      "captures": {
        "1": { "name": "entity.name.function.macro.rsx" },
        "2": { "name": "punctuation.brackets.begin.rsx" }
      },
      "endCaptures": {
        "1": { "name": "punctuation.brackets.end.rsx" }
      },
      "name": "meta.embedded.dioxus.rsx",
      "patterns": [
        { "include": "#rsx-main-block" },
        { "include": "#tag-upercase" },
        { "include": "#tag-block" },
        { "include": "source.rust" }

      ]
    }
  ],
  "repository": {
    "rsx-main-block": {
      "begin": "(\\{|\\()",
      "end": "(\\}|\\))",
      "beginCaptures": {
        "1": { "name": "punctuation.brackets.begin.rsx" }
      },
      "endCaptures": {
        "1": { "name": "punctuation.brackets.end.rsx" }
      },
      "patterns": [
            { "include": "#rsx-main-block" },
            { "include": "#tag-upercase" },
            { "include": "#tag-block" },
            { "include": "#attribute" },
            { "include": "source.rust" }
        ]
    },
    "tag-block": {
      "begin": "(?<!\\bwhile\\s|\\bfor\\s|\\bif\\s|\\bmatch\\s|\\b\\.)\\b(\\b[a-z_][a-zA-Z0-9_]*)\\s*({)",
      "beginCaptures": {
        "1": { "name": "meta.tag.rsx entity.name.tag.html.rsx storage.type.rust.rsx keyword.other.rust.rsx " },
        "2": { "name": "punctuation.brackets.begin.rsx" }
      },
      "end": "(})",
      "endCaptures": {
        "1": { "name": "punctuation.brackets.end.rsx" }
      },
      "patterns": [
        { "include": "#rsx-main-block" },
        { "include": "#tag-upercase" },
        { "include": "#tag-block" },
        { "include": "#attribute" },
        { "include": "source.rust" }
      ]
    },
    "tag-upercase": {
      "begin": "(?<!\\bwhile\\s|\\bfor\\s|\\bif\\s|\\bmatch\\s|\\b\\.)\\b(\\b[A-Z][a-zA-Z0-9_]*)\\s*({)",
      "beginCaptures": {
          "1": { "name": "meta.tag.rsx entity.name.tag.html.rsx storage.type.rust.rsx keyword.other.rust.rsx entity.name.type.rsx" }
      },
      "end": "(})",
      "patterns":[
        { "include": "#rsx-main-block" },
        { "include": "#tag-upercase" },
        { "include": "#tag-block" },
        { "include": "#attribute" },
        { "include": "source.rust" }
      ]
    },
    "attribute": {
      "match": "(?<!\\blet\\s|\\bconst\\s|\\bmut\\s)\\b([a-z_][a-zA-Z0-9_#]*)\\s*(?<!:)(:)(?!:)",
      "captures": {
        "1": { "name": "entity.other.attribute-name.rsx entity.name.function.rsx " },
        "2": { "name": "keyword.operator.key-value.rust" }
      }
    }
  }
}